import discord
import random
import aiohttp
from discord.ext import commands

class Fun(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.ultima_piada = None  # Vari√°vel para armazenar a √∫ltima piada

        # Lista de piadas personalizadas
        self.piadas_fixas = [
            "O que o pato disse para a pata? R.: Vem Qu√°!",
            "Por que o menino estava falando ao telefone deitado? R.: Para n√£o cair a liga√ß√£o.",
            "Qual √© a f√≥rmula da √°gua benta? R.: H Deus O!"
        ]

    @commands.command()
    async def piada(self, ctx):
        """Conta uma piada aleat√≥ria misturando API e lista fixa."""
        usar_api = random.choice([True, False])

        if usar_api:
            url = "https://v2.jokeapi.dev/joke/Any?lang=pt"
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as response:
                    data = await response.json()
                    nova_piada = data["joke"] if data["type"] == "single" else f"{data['setup']}\n{data['delivery']}"
        else:
            nova_piada = random.choice(self.piadas_fixas)

        await ctx.reply(nova_piada)

    @commands.command()
    async def Pedro(self, ctx):
        """Responde com uma frase aleat√≥ria."""
        frases = [
            "Pedro rebola de ladinho pros cria",
            "ain pedrinho apel√£o",
            "Pedro √© o rei do rebolado!"
        ]
        await ctx.reply(random.choice(frases))

    @commands.command()
    async def eae(self, ctx):
        """Cumprimenta o usu√°rio."""
        nome = ctx.author.display_name
        await ctx.reply(f"eae {nome}, blz?")

    @commands.command()
    async def guess(self, ctx):
        """Jogo de adivinha√ß√£o via rea√ß√µes."""
        numero_correto = random.randint(1, 10)
        mensagem = await ctx.send("üé≤ Escolha um n√∫mero entre 1 e 10 clicando na rea√ß√£o abaixo!")

        emojis = ["1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£", "5Ô∏è‚É£", "6Ô∏è‚É£", "7Ô∏è‚É£", "8Ô∏è‚É£", "9Ô∏è‚É£", "üîü"]
        for emoji in emojis:
            await mensagem.add_reaction(emoji)

        def check(reaction, user):
            return user == ctx.author and reaction.message.id == mensagem.id and reaction.emoji in emojis

        try:
            reaction, user = await self.bot.wait_for("reaction_add", timeout=30.0, check=check)
        except TimeoutError:
            await ctx.send("‚è≥ Tempo esgotado! Tente novamente.")
            return

        escolha_usuario = emojis.index(reaction.emoji) + 1

        if escolha_usuario == numero_correto:
            await ctx.send(f"üéâ Parab√©ns, {ctx.author.mention}! Voc√™ acertou! O n√∫mero era {numero_correto}.")
        else:
            await ctx.send(f"‚ùå Errado! O n√∫mero era {numero_correto}. Tente novamente!")

import discord
import random
import aiohttp
from discord.ext import commands

class Fun(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.ultima_piada = None  # Vari√°vel para armazenar a √∫ltima piada

        # Lista de piadas personalizadas
        self.piadas_fixas = [
"O que o pato disse para a pata? R.: Vem Qu√°!",
            "Por que o menino estava falando ao telefone deitado? R.: Para n√£o cair a liga√ß√£o.",
            "A enfermeira diz ao m√©dico:\n- Tem um homem invis√≠vel na sala de espera.\nO m√©dico responde:\n- Diga a ele que n√£o posso v√™-lo agora.",
            "Qual √© a f√≥rmula da √°gua benta? R.: H Deus O!",
            "O sujeito vai ao m√©dico:\n‚Äì Doutor, tenho tend√™ncias suicidas. O que fa√ßo?\n‚Äì Em primeiro lugar, pague a consulta.",
            "Qual a diferen√ßa entre um padre e um tenista?\nR.: As bolas com que o tenista brinca t√™m pelinhos.",
            "Porque √© que a Anne Frank n√£o acabou o di√°rio?\nR. :Problemas de concentra√ß√£o.",
            "sabe por que michael jackson n√£o pode dirigir um onibus?/nR. :por que ele esta morto.",
            "Sabias que sem √°rabes n√£o tinha acontecido o 11/9?\nR:. Tinha acontecido o XI/IX.",
            "Qual √© a diferen√ßa entre uma pizza e um judeu?\nR:. A pizza quando vai ao forno n√£o grita.",
            "Por que o livro de matem√°tica cometeu suic√≠dio?\nR:. ‚Äî Porque tinha muitos problemas.",
            "Um cego entra numa loja, pega o seu c√£o-guia e come√ßa a balan√ß√°-lo sobre a sua cabe√ßa.\nR: ‚Äì O que voc√™ est√° fazendo? \nR:‚Äì Ah, s√≥ dando uma olhada. ",
            "‚Äì Com licen√ßa, qual √© a senha do Wi-Fi aqui?\nR: ‚Äì Isso √© um funeral! \nR:‚Äì Funeral com letra inicial mai√∫scula ou min√∫scula?",
            "Os nascidos em 2000 facilitaram muito para as pessoas que passam por seus t√∫mulos calcular a idade."
        ]

    @commands.command()
    async def piada(self, ctx):
        """Conta uma piada aleat√≥ria misturando API e lista fixa."""
        usar_api = random.choice([True, False])

        if usar_api:
            url = "https://v2.jokeapi.dev/joke/Any?lang=pt"
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as response:
                    data = await response.json()
                    nova_piada = data["joke"] if data["type"] == "single" else f"{data['setup']}\n{data['delivery']}"
        else:
            nova_piada = random.choice(self.piadas_fixas)

        await ctx.reply(nova_piada)

    @commands.command()
    async def Pedro(self, ctx):
        """Responde com uma frase aleat√≥ria."""
        frases = [
            "Pedro rebola de ladinho pros cria",
            "ain pedrinho apel√£o",
            "Pedro √© o rei do rebolado!"
        ]
        await ctx.reply(random.choice(frases))

    @commands.command()
    async def eae(self, ctx):
        """Cumprimenta o usu√°rio."""
        nome = ctx.author.display_name
        await ctx.reply(f"eae {nome}, blz?")

    @commands.command()
    async def guess(self, ctx):
        """Jogo de adivinha√ß√£o via rea√ß√µes."""
        numero_correto = random.randint(1, 10)
        mensagem = await ctx.send("üé≤ Escolha um n√∫mero entre 1 e 10 clicando na rea√ß√£o abaixo!")

        emojis = ["1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£", "5Ô∏è‚É£", "6Ô∏è‚É£", "7Ô∏è‚É£", "8Ô∏è‚É£", "9Ô∏è‚É£", "üîü"]
        for emoji in emojis:
            await mensagem.add_reaction(emoji)

        def check(reaction, user):
            return user == ctx.author and reaction.message.id == mensagem.id and reaction.emoji in emojis

        try:
            reaction, user = await self.bot.wait_for("reaction_add", timeout=30.0, check=check)
        except TimeoutError:
            await ctx.send("‚è≥ Tempo esgotado! Tente novamente.")
            return

        escolha_usuario = emojis.index(reaction.emoji) + 1

        if escolha_usuario == numero_correto:
            await ctx.send(f"üéâ Parab√©ns, {ctx.author.mention}! Voc√™ acertou! O n√∫mero era {numero_correto}.")
        else:
            await ctx.send(f"‚ùå Errado! O n√∫mero era {numero_correto}. Tente novamente!")

    @commands.command()
    async def randomroll(self, ctx, quantidade: int = None, intervalo: int = None):
        """Sorteia m√∫ltiplos n√∫meros dentro de um intervalo escolhido pelo usu√°rio (Ex: !randomroll 4 10)."""

        if quantidade is None or intervalo is None:
            await ctx.reply("‚ùå Voc√™ precisa fornecer a quantidade de n√∫meros e o intervalo! Exemplo: `!randomroll 4 10`")
            return

        if quantidade < 1 or quantidade > intervalo:
            await ctx.reply("‚ùå A quantidade deve ser menor ou igual ao intervalo! Exemplo: `!randomroll 4 10`")
            return

        numeros_sorteados = random.sample(range(1, intervalo + 1), quantidade)
        await ctx.reply(f"üé≤ Os {quantidade} n√∫meros sorteados dentro do intervalo de 1 a {intervalo} foram: {', '.join(map(str, numeros_sorteados))}")

async def setup(bot):
    await bot.add_cog(Fun(bot))
async def setup(bot):
    await bot.add_cog(Fun(bot))